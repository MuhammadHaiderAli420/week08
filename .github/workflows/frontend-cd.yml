name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: "External IP of Product Service (e.g., http://X.X.X.X:8000)"
        required: true
        default: "http://<ip_address>:8000"
      order_api_ip:
        description: "External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)"
        required: true
        default: "http://<ip_address>:8001"
      aks_cluster_name:
        description: "Name of the AKS Cluster to deploy to"
        required: true
        default: "<aks_name>"
      aks_resource_group:
        description: "Resource Group of the AKS Cluster"
        required: true
        default: "<resource_group_name>"

env:
  # From repo secrets
  ACR_NAME: ${{ secrets.ACR_NAME }}                 # e.g. s223121256acr5804  (NO .azurecr.io)
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }} # e.g. s223121256acr5804.azurecr.io
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Failsafe: if ACR_NAME secret was forgotten, derive it from the login server
      - name: Derive ACR_NAME if empty
        run: |
          if [ -z "${ACR_NAME}" ] && [ -n "${ACR_LOGIN_SERVER}" ]; then
            DERIVED="$(echo "${ACR_LOGIN_SERVER}" | cut -d. -f1)"
            echo "ACR_NAME=${DERIVED}" >> $GITHUB_ENV
            echo "Using derived ACR_NAME=${DERIVED}"
          fi

      # IMPORTANT: --name expects the registry *name* (no domain)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Inject Backend IPs into Frontend main.js
        run: |
          echo "Injecting Product/Order URLs into frontend/main.js"
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js
          echo "---- modified frontend/main.js ----"
          cat frontend/main.js
          echo "-----------------------------------"

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}
          # also maintain 'latest'
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      - name: Deploy Frontend to AKS
        run: |
          cd k8s/
          # ensure the deployment points at the image we just pushed (latest)
          kubectl set image deployment/frontend frontend=${{ env.ACR_LOGIN_SERVER }}/frontend:latest --record=true || true
          kubectl apply -f frontend.yaml
          # make service public if template uses ClusterIP
          kubectl patch svc frontend-service-w08e1 -p '{"spec":{"type":"LoadBalancer"}}' || true
          kubectl get deploy,po,svc -o wide

      - name: Logout from Azure
        if: always()
        run: az logout
